import logging
from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import AsyncSessionLocal, User, Order
from app.keyboards import (
    language_keyboard, main_menu_keyboard, phone_number_keyboard,
    location_keyboard, confirm_keyboard, bottles_count_keyboard, back_keyboard
)

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RegistrationStates(StatesGroup):
    phone_number = State()
    location = State()
    bottles_count = State()
    confirm_order = State()
    order_by_id = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ ID

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(F.text == "/start")
async def start_command(message: types.Message):
    welcome_text = (
        "üåü –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LaVita! üåü\n"
        "üö∞ –ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —á–∏—Å—Ç—É—é –≤–æ–¥—É –ø—Ä—è–º–æ –∫ –≤–∞–º –¥–æ–º–æ–π –∏–ª–∏ –≤ –æ—Ñ–∏—Å.\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
    )
    photo_url = "https://telegra.ph/file/a761e51a713289a2bfa28.jpg"
    await message.answer_photo(
        photo=photo_url,
        caption=welcome_text,
        reply_markup=language_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@router.callback_query(F.data.startswith("lang_"))
async def language_callback(callback_query: types.CallbackQuery, state: FSMContext):
    language = callback_query.data.split("_")[1]
    await state.update_data(language=language)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard(language))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å"
@router.message(F.text.in_(["–ó–∞–∫–∞–∑–∞—Ç—å", "Order"]))
async def order_callback(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await session.get(User, message.from_user.id)
        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" if language == "ru" else "Please share your phone number:",
                reply_markup=phone_number_keyboard(language)
            )
            await state.set_state(RegistrationStates.phone_number)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ç—ã–ª–æ–∫
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫:" if language == "ru" else "Enter the number of bottles:",
                reply_markup=bottles_count_keyboard(language)
            )
            await state.set_state(RegistrationStates.bottles_count)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(RegistrationStates.phone_number, F.contact | F.text.in_(["–ù–∞–∑–∞–¥", "Back"]))
async def process_phone_number(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    if message.text in ["–ù–∞–∑–∞–¥", "Back"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard(language))
        await state.clear()
        return

    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    await message.answer(
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:" if language == "ru" else "Share your location:",
        reply_markup=location_keyboard(language)
    )
    await state.set_state(RegistrationStates.location)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@router.message(RegistrationStates.location, F.location | F.text.in_(["–ù–∞–∑–∞–¥", "Back"]))
async def process_location(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    if message.text in ["–ù–∞–∑–∞–¥", "Back"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=phone_number_keyboard(language))
        await state.set_state(RegistrationStates.phone_number)
        return

    location = message.location
    await state.update_data(location=location)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with AsyncSessionLocal() as session:
        user = User(
            id=message.from_user.id,
            username=message.from_user.username,
            full_name=message.from_user.full_name,
            phone_number=user_data["phone_number"],
            language=language
        )
        session.add(user)
        await session.commit()

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ç—ã–ª–æ–∫
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫:" if language == "ru" else "Enter the number of bottles:",
        reply_markup=bottles_count_keyboard(language)
    )
    await state.set_state(RegistrationStates.bottles_count)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É—Ç—ã–ª–æ–∫
@router.message(RegistrationStates.bottles_count, F.text)
async def process_bottles_count(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    if message.text in ["–ù–∞–∑–∞–¥", "Back"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard(language))
        await state.clear()
        return

    try:
        bottles_count = int(message.text)  # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        if bottles_count < 1:
            raise ValueError
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0." if language == "ru" else "Invalid number of bottles. Enter a number greater than 0."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(bottles_count=bottles_count)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:" if language == "ru" else "Confirm the order:",
        reply_markup=confirm_keyboard(language)
    )
    await state.set_state(RegistrationStates.confirm_order)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.message(RegistrationStates.confirm_order, F.text.in_(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "Confirm", "–ù–∞–∑–∞–¥", "Back"]))
async def process_confirm_order(message: types.Message, state: FSMContext):
    if message.text in ["–ù–∞–∑–∞–¥", "Back"]:
        user_data = await state.get_data()
        language = user_data.get("language", "ru")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫:", reply_markup=bottles_count_keyboard(language))
        await state.set_state(RegistrationStates.bottles_count)
        return

    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    async with AsyncSessionLocal() as session:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        order = Order(
            user_id=message.from_user.id,
            bottles_count=user_data["bottles_count"],
            location=str(user_data["location"])
        )
        session.add(order)
        await session.commit()

        # –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if language == "ru":
            success_message = (
                "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\n"
                f"üßä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫: {user_data['bottles_count']}\n"
                f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['location']}\n"
                "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!"
            )
        else:
            success_message = (
                "‚úÖ Your order has been successfully placed!\n"
                f"üßä Number of bottles: {user_data['bottles_count']}\n"
                f"üìç Delivery address: {user_data['location']}\n"
                "üôè Thank you for your order!"
            )

        await message.answer(success_message, reply_markup=main_menu_keyboard(language))
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ ID"
@router.message(F.text.in_(["–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ ID", "Order by ID"]))
async def order_by_id_callback(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID:" if language == "ru" else "Enter your ID:",
        reply_markup=back_keyboard(language)
    )
    await state.set_state(RegistrationStates.order_by_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(RegistrationStates.order_by_id, F.text)
async def process_order_by_id(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    if message.text in ["–ù–∞–∑–∞–¥", "Back"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard(language))
        await state.clear()
        return

    user_code = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    async with AsyncSessionLocal() as session:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É
        user = await session.execute(
            User.__table__.select().where(User.user_code == user_code)
        )
        user = user.scalars().first()

        if not user:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω." if language == "ru" else "User with this ID not found."
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            user_id=user.id,
            user_code=user_code
        )

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫:" if language == "ru" else "Enter the number of bottles:",
            reply_markup=bottles_count_keyboard(language)
        )
        await state.set_state(RegistrationStates.bottles_count)

@router.message(F.text.in_(["–ü—Ä–æ—Ñ–∏–ª—å", "Profile"]))
async def profile_callback(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    async with AsyncSessionLocal() as session:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer(
                "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã." if language == "ru" else "You are not registered yet.",
                reply_markup=main_menu_keyboard(language)
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        if language == "ru":
            profile_text = (
                "üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"üë§ –ò–º—è: {user.full_name}\n"
                f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone_number}\n"
                f"üìç –ê–¥—Ä–µ—Å: {user.address}\n"
                f"üåê –Ø–∑—ã–∫: {user.language}"
            )
        else:
            profile_text = (
                "üì± Your profile:\n"
                f"üë§ Name: {user.full_name}\n"
                f"üìû Phone number: {user.phone_number}\n"
                f"üìç Address: {user.address}\n"
                f"üåê Language: {user.language}"
            )

        await message.answer(profile_text, reply_markup=main_menu_keyboard(language))