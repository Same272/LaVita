import logging
import random
import string

import aiohttp
from aiogram import Router, types, F
from aiogram.fsm import state
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from datetime import datetime
from database.models import AsyncSessionLocal, User, Order
from app.keyboards import (
    language_keyboard, main_menu_keyboard, phone_number_keyboard,
    location_keyboard, confirm_keyboard, bottles_count_keyboard,
    back_keyboard, profile_keyboard, expenses_keyboard,wasabi_keyboard
)
from geopy.geocoders import Nominatim
from geopy.adapters import AioHTTPAdapter
import asyncio


router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def generate_user_code(length=8):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))


class RegistrationStates(StatesGroup):
    phone_number = State()      # –®–∞–≥ 1: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    location = State()          # –®–∞–≥ 2: –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
    address_details = State()   # –®–∞–≥ 3: –£—Ç–æ—á–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    bottles_count = State()     # –®–∞–≥ 4: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫
    confirm_order = State()     # –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    order_by_id = State()       # –î–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ ID
    address = State()


async def get_address_from_coords(latitude: float, longitude: float, language: str = 'ru') -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —á–∏—Ç–∞–µ–º—ã–π –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —á–µ—Ä–µ–∑ Nominatim API"""
    url = f"https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}&addressdetails=1&accept-language={language}"
    headers = {"User-Agent": "LaVitaWaterDeliveryBot/1.0 (contact@example.com)"}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    address = data.get('address', {})

                    # –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞
                    components = []

                    # –£–ª–∏—Ü–∞ + –Ω–æ–º–µ—Ä –¥–æ–º–∞
                    if 'road' in address:
                        street = address['road']
                        if 'house_number' in address:
                            street += f" {address['house_number']}"
                        components.append(street)

                    # –†–∞–π–æ–Ω/–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω
                    for area in ['neighbourhood', 'suburb', 'city_district']:
                        if area in address:
                            components.append(address[area])
                            break

                    # –ì–æ—Ä–æ–¥/–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
                    if 'city' in address:
                        components.append(address['city'])
                    elif 'town' in address:
                        components.append(address['town'])
                    elif 'village' in address:
                        components.append(address['village'])

                    if components:
                        return ", ".join(components)

                    return "–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" if language == 'ru' else "Address not found"

                return "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É" if language == 'ru' else "Service request error"

    except Exception as e:
        logger.error(f"Geocoding error: {str(e)}")
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞" if language == 'ru' else "Service error"


@router.message(RegistrationStates.location, F.location)
async def process_location(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        loc = message.location
        latitude = loc.latitude
        longitude = loc.longitude

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å
        base_address = await get_address_from_coords(latitude, longitude, language)

        if "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" in base_address or "not found" in base_address:
            raise ValueError("–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(
            latitude=latitude,
            longitude=longitude,
            base_address=base_address
        )

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è
        prompt = (
            "üìç <b>–ë–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:</b>\n"
            f"{base_address}\n\n"
            "üè† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ:\n"
            "‚Ä¢ –ù–æ–º–µ—Ä –¥–æ–º–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)\n"
            "‚Ä¢ –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã/–æ—Ñ–∏—Å–∞\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä: 15 –∏–ª–∏ 15, –∫–≤ 42</i>"
            if language == "ru" else
            "üìç <b>Base address detected:</b>\n"
            f"{base_address}\n\n"
            "üè† Please specify:\n"
            "‚Ä¢ House number (if missing)\n"
            "‚Ä¢ Apartment/office number\n\n"
            "<i>Example: 15 or 15, apt 42</i>"
        )

        await message.answer(
            prompt,
            parse_mode="HTML",
            reply_markup=back_keyboard(language)
        )
        await state.set_state(RegistrationStates.address_details)

    except Exception as e:
        logger.error(f"Location processing error: {str(e)}")
        error_msg = (
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ –ª–æ–∫–∞—Ü–∏–∏\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é"
            if language == "ru" else
            "‚ùå Could not determine address from location\n"
            "Please try again or enter address manually"
        )
        await message.answer(error_msg)

@router.message(F.text == "/start")
async def start_command(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    welcome_photo = types.FSInputFile("static/welcome.png")  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    welcome_text = (
        "üåü –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LaVita! üåü\n"
        "üö∞ –ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —á–∏—Å—Ç—É—é –≤–æ–¥—É –ø—Ä—è–º–æ –∫ –≤–∞–º –¥–æ–º–æ–π –∏–ª–∏ –≤ –æ—Ñ–∏—Å.\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
    )
    await message.answer_photo(
        photo=welcome_photo,
        caption=welcome_text,
        reply_markup=language_keyboard()
    )


@router.callback_query(F.data.startswith("lang_"))
async def language_callback(callback_query: types.CallbackQuery, state: FSMContext):
    language = callback_query.data.split("_")[1]
    await state.update_data(language=language)

    async with AsyncSessionLocal() as session:
        user = await session.get(User, callback_query.from_user.id)
        if user:
            user.language = language
            session.add(user)
            await session.commit()

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if language == "ru" else "Choose action:",
        reply_markup=main_menu_keyboard(language)
    )


@router.message(F.text.in_(["üßä –ó–∞–∫–∞–∑–∞—Ç—å", "üßä Order"]))
async def order_callback(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    # –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998XXYYYYYYY"
        if language == "ru" else
        "To place an order, we need your phone number.\n"
        "Please use the button below or enter manually in format +998XXYYYYYYY",
        reply_markup=phone_number_keyboard(language)
    )
    await state.set_state(RegistrationStates.phone_number)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
@router.message(RegistrationStates.phone_number, F.contact | F.text)
async def process_phone_number(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    if message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Back"]:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if language == "ru" else "Choose action:",
            reply_markup=main_menu_keyboard(language)
        )
        await state.clear()
        return

    if message.contact:
        phone_number = message.contact.phone_number
    else:
        phone_number = message.text

    phone_number = phone_number.replace(" ", "").replace("-", "")

    if not (phone_number.startswith("+") or phone_number.isdigit()):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +998XXYYYYYYY –∏–ª–∏ 998XXYYYYYYY"
            if language == "ru" else
            "Invalid format. Use +998XXYYYYYYY or 998XXYYYYYYY"
        )
        return

    await state.update_data(phone_number=phone_number)

    # –ü–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:" if language == "ru" else "Now share your location:",
        reply_markup=location_keyboard(language)
    )
    await state.set_state(RegistrationStates.location)



@router.message(RegistrationStates.address, F.text)
async def process_address_details(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Back"]:
        await message.answer(
            "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:" if language == "ru" else "üìç Share your location:",
            reply_markup=location_keyboard(language)
        )
        await state.set_state(RegistrationStates.location)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_data = {
        'phone_number': "üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" if language == "ru" else "üì± Phone number",
        'base_address': "üìç –ë–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å" if language == "ru" else "üìç Base address"
    }

    missing_fields = [name for field, name in required_data.items() if field not in user_data]

    if missing_fields:
        error_msg = (
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing_fields)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
            if language == "ru" else
            "‚ùå <b>Registration data incomplete</b>\n\n"
            f"Missing: {', '.join(missing_fields)}\n\n"
            "Please start the process again."
        )
        await message.answer(error_msg, parse_mode="HTML", reply_markup=main_menu_keyboard(language))
        await state.clear()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    address_details = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    if not address_details or not any(c.isdigit() for c in address_details):
        error_msg = (
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
            "‚Ä¢ –ù–æ–º–µ—Ä –¥–æ–º–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
            "‚Ä¢ –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä: <code>15</code> –∏–ª–∏ <code>15, –∫–≤ 42</code></i>"
            if language == "ru" else
            "‚ùå <b>Invalid address format</b>\n\n"
            "Please include:\n"
            "‚Ä¢ House number (required)\n"
            "‚Ä¢ Apartment number (if needed)\n\n"
            "<i>Example: <code>15</code> or <code>15, apt 42</code></i>"
        )
        await message.answer(error_msg, parse_mode="HTML")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    full_address = f"{user_data['base_address']}, {address_details}"

    try:
        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.get(User, message.from_user.id)

            if user:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.address = full_address
                user.phone_number = user_data['phone_number']
                status_msg = "–æ–±–Ω–æ–≤–ª–µ–Ω" if language == "ru" else "updated"
            else:
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_code = generate_user_code()
                user = User(
                    id=message.from_user.id,
                    user_code=user_code,
                    username=message.from_user.username,
                    full_name=message.from_user.full_name,
                    phone_number=user_data['phone_number'],
                    language=language,
                    address=full_address,
                    total_spent=0
                )
                session.add(user)
                status_msg = "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" if language == "ru" else "registered"

            await session.commit()

            # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            success_template = (
                "‚ú® <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                "üìã <i>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</i>\n"
                "üë§ {full_name}\n"
                "üì± {phone}\n"
                "üè† {address}\n\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫:"
                if language == "ru" else
                "‚ú® <b>Registration completed!</b>\n\n"
                "üìã <i>Your details:</i>\n"
                "üë§ {full_name}\n"
                "üì± {phone}\n"
                "üè† {address}\n\n"
                "Now please enter bottles count:"
            )

            await message.answer(
                success_template.format(
                    full_name=message.from_user.full_name,
                    phone=user_data['phone_number'],
                    address=full_address
                ),
                parse_mode="HTML",
                reply_markup=bottles_count_keyboard(language)
            )

            await state.update_data(location=full_address)
            await state.set_state(RegistrationStates.bottles_count)

    except Exception as e:
        logger.error(f"Database error in address processing: {e}")
        error_msg = (
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if language == "ru" else
            "‚ö†Ô∏è <b>Data save error</b>\n\n"
            "Please try again later."
        )
        await message.answer(error_msg, parse_mode="HTML", reply_markup=main_menu_keyboard(language))
        await state.clear()





@router.message(RegistrationStates.bottles_count, F.text.in_(["‚ûï", "‚ûñ", "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úÖ Confirm"]))
async def process_bottles_count(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")
    current_count = user_data.get("bottles_count", 0)

    if message.text == "‚ûï":
        current_count += 1
    elif message.text == "‚ûñ":
        current_count = max(0, current_count - 1)
    elif message.text in ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úÖ Confirm"]:
        if current_count < 1:
            await message.answer(
                "–ú–∏–Ω–∏–º—É–º 1 –±—É—Ç—ã–ª–∫–∞" if language == "ru" else "Minimum 1 bottle"
            )
            return

        await state.update_data(bottles_count=current_count)
        bottle_price = 20000
        total_cost = current_count * bottle_price
        await state.update_data(total_cost=total_cost)

        order_text = (
            f"üßä –ë—É—Ç—ã–ª–æ–∫: {current_count}\n"
            f"üí∏ –°—É–º–º–∞: {total_cost} —Å—É–º\n"
            f"üìç –ê–¥—Ä–µ—Å: {user_data['location']}\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?"
            if language == "ru"
            else f"üßä Bottles: {current_count}\n"
                 f"üí∏ Total: {total_cost} UZS\n"
                 f"üìç Address: {user_data['location']}\n"
                 "Confirm order?"
        )
        await message.answer(order_text, reply_markup=confirm_keyboard(language))
        await state.set_state(RegistrationStates.confirm_order)
        return

    await state.update_data(bottles_count=current_count)
    count_text = (
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_count}" if language == "ru"
        else f"Count: {current_count}"
    )
    await message.answer(count_text, reply_markup=bottles_count_keyboard(language))


@router.message(RegistrationStates.confirm_order, F.text.in_(["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úÖ Confirm", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Back"]))
async def process_confirm_order(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    if message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Back"]:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫:" if language == "ru" else "Enter the number of bottles:",
            reply_markup=bottles_count_keyboard(language)
        )
        await state.set_state(RegistrationStates.bottles_count)
        return

    async with AsyncSessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer(
                "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" if language == "ru" else "Error: user not found",
                reply_markup=main_menu_keyboard(language)
            )
            return

        order = Order(
            user_id=message.from_user.id,
            bottles_count=user_data["bottles_count"],
            location=user_data["location"],
            status="active",
            total_cost=user_data["total_cost"]
        )
        session.add(order)
        user.total_spent += user_data["total_cost"]
        session.add(user)
        await session.commit()

        success_text = (
            f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n"
            f"üßä –ë—É—Ç—ã–ª–æ–∫: {user_data['bottles_count']}\n"
            f"üí∏ –°—É–º–º–∞: {user_data['total_cost']} —Å—É–º\n"
            f"üìç –ê–¥—Ä–µ—Å: {user_data['location']}\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!"
            if language == "ru"
            else f"‚úÖ Order accepted!\n"
                 f"üßä Bottles: {user_data['bottles_count']}\n"
                 f"üí∏ Total: {user_data['total_cost']} UZS\n"
                 f"üìç Address: {user_data['location']}\n"
                 "Thank you for your order!"
        )
        await message.answer(success_text, reply_markup=main_menu_keyboard(language))
        await state.clear()


# –ü—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
@router.message(F.text.in_(["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üë§ Profile"]))
async def profile_callback(message: types.Message, state: FSMContext):
    await state.update_data(in_profile=True)
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    async with AsyncSessionLocal() as session:
        user = await session.get(User, message.from_user.id)
        if not user:
            await message.answer(
                "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã." if language == "ru" else "You are not registered yet.",
                reply_markup=main_menu_keyboard(language)
            )
            return

        profile_text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"üÜî –ö–æ–¥: {user.user_code}\n"
            f"üì± –ò–º—è: {user.full_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
            f"üìç –ê–¥—Ä–µ—Å: {user.address}\n"
            f"üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.total_spent} —Å—É–º"
            if language == "ru"
            else f"üë§ Profile:\n"
                 f"üÜî Code: {user.user_code}\n"
                 f"üì± Name: {user.full_name}\n"
                 f"üìû Phone: {user.phone_number}\n"
                 f"üìç Address: {user.address}\n"
                 f"üí∏ Total spent: {user.total_spent} UZS"
        )
        await message.answer(profile_text, reply_markup=profile_keyboard(language))


@router.message(F.text.in_(["üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "üåê Change language"]))
async def change_language_prompt(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:" if "–°–º–µ–Ω–∏—Ç—å" in message.text else "Choose language:",
        reply_markup=language_keyboard()
    )


@router.callback_query(F.data.startswith("lang_"))
async def change_language_callback(callback_query: types.CallbackQuery, state: FSMContext):
    language = callback_query.data.split("_")[1]
    await state.update_data(language=language)

    async with AsyncSessionLocal() as session:
        user = await session.get(User, callback_query.from_user.id)
        if user:
            user.language = language
            session.add(user)
            await session.commit()

    await callback_query.message.answer(
        "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω!" if language == "ru" else "Language changed!"
    )
    await profile_callback(callback_query.message, state)


@router.message(F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Back"]))
async def back_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    if user_data.get('in_profile', False):
        await state.update_data(in_profile=False)
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language == "ru" else "Main menu",
        reply_markup=main_menu_keyboard(language)
    )


@router.message(F.text.in_(["üí∞ –¢—Ä–∞—Ç—ã", "üí∞ Expenses"]))
async def show_expenses(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    lang = user_data.get("language", "ru")

    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await session.get(User, message.from_user.id)
        if not user:
            return await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" if lang == "ru" else "‚ùå User not found"
            )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
        orders = await session.execute(
            select(Order)
            .where(Order.user_id == message.from_user.id)
        )
        orders = orders.scalars().all()

        total_spent = user.total_spent or 0
        order_count = len(orders)
        avg_order = total_spent / order_count if order_count > 0 else 0

        # –°–æ–∑–¥–∞–µ–º "–≥—Ä–∞—Ñ–∏–∫" –∏–∑ emoji
        progress_bar = "üü¢" * min(10, int(order_count / 2)) + "‚ö™Ô∏è" * (10 - min(10, int(order_count / 2)))

        message_text = (
            "üìä <b>–í–∞—à–∏ —Ç—Ä–∞—Ç—ã</b>\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üí≥ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>{total_spent:,} —Å—É–º</b>\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: <b>{order_count}</b>\n"
            f"üìå –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{avg_order:,.0f} —Å—É–º</b>\n\n"
            "üî¢ –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤:\n"
            f"{progress_bar}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            if lang == "ru" else
            "üìä <b>Your Expenses</b>\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üí≥ Total spent: <b>{total_spent:,} UZS</b>\n"
            f"üì¶ Orders count: <b>{order_count}</b>\n"
            f"üìå Average order: <b>{avg_order:,.0f} UZS</b>\n\n"
            "üî¢ Order frequency:\n"
            f"{progress_bar}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )

        await message.answer(
            message_text,
            parse_mode="HTML",
            reply_markup=expenses_keyboard(lang)
        )


@router.message(F.text.in_(["üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", "üì¶ Active Orders"]))
async def active_orders(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    lang = user_data.get("language", "ru")

    async with AsyncSessionLocal() as session:
        orders = await session.execute(
            select(Order)
            .where(
                (Order.user_id == message.from_user.id) &
                (Order.status == "active")
            )
            .order_by(Order.created_at.desc())
        )
        orders = orders.scalars().all()

        if not orders:
            no_orders = (
                "üîÑ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
                "–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π?"
                if lang == "ru" else
                "üîÑ No active orders\n"
                "Would you like to place a new one?"
            )
            return await message.answer(no_orders, reply_markup=main_menu_keyboard(lang))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        header = (
            "üöö <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            if lang == "ru" else
            "üöö <b>Your Active Orders</b>\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )

        for order in orders:
            delivery_time = order.created_at.strftime("%H:%M %d.%m")
            header += (
                f"\n\nüÜî <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                f"‚è± –í—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {delivery_time}\n"
                f"üì¶ –ë—É—Ç—ã–ª–æ–∫: {order.bottles_count} —à—Ç.\n"
                f"üíµ –°—É–º–º–∞: {order.total_cost:,} —Å—É–º\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.location[:30]}..."
                if lang == "ru" else
                f"\n\nüÜî <b>Order #{order.id}</b>\n"
                f"‚è± Order time: {delivery_time}\n"
                f"üì¶ Bottles: {order.bottles_count} pcs\n"
                f"üíµ Amount: {order.total_cost:,} UZS\n"
                f"üìç Address: {order.location[:30]}..."
            )

        await message.answer(
            header,
            parse_mode="HTML",
            reply_markup=back_keyboard(lang)
        )


# –ó–∞–∫–∞–∑ –ø–æ ID
@router.message(F.text.in_(["üÜî –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ ID", "üÜî Order by ID"]))
async def order_by_id_callback(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥:" if language == "ru" else "Enter your code:",
        reply_markup=back_keyboard(language)
    )
    await state.set_state(RegistrationStates.order_by_id)


@router.message(RegistrationStates.order_by_id, F.text)
async def process_order_by_id(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    language = user_data.get("language", "ru")

    if message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è Back"]:
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if language == "ru" else "Main menu",
            reply_markup=main_menu_keyboard(language)
        )
        await state.clear()
        return

    user_code = message.text.upper().strip()

    async with AsyncSessionLocal() as session:
        user = await session.execute(
            select(User).where(User.user_code == user_code)
        )
        user = user.scalar_one_or_none()

        if not user:
            await message.answer(
                "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω." if language == "ru" else "Code not found.",
                reply_markup=back_keyboard(language)
            )
            return

        await state.update_data(
            phone_number=user.phone_number,
            location=user.address
        )
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–æ–∫:" if language == "ru" else "Enter the number of bottles:",
            reply_markup=bottles_count_keyboard(language)
        )
        await state.set_state(RegistrationStates.bottles_count)


@router.message(F.text.in_(["üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", "üìú Order History"]))
async def order_history(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        language = user_data.get("language", "ru")

        async with AsyncSessionLocal() as session:
            orders = await session.execute(
                select(Order)
                .where(Order.user_id == message.from_user.id)
                .order_by(Order.created_at.desc())
            )
            orders = orders.scalars().all()

            if not orders:
                no_orders_msg = (
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n"
                    "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑?"
                    if language == "ru" else
                    "üì≠ You don't have any orders yet.\n"
                    "Would you like to place your first order?"
                )
                await message.answer(no_orders_msg, reply_markup=main_menu_keyboard(language))
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            header = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n" if language == "ru" else "üìã <b>Your orders:</b>\n\n"
            message_text = header

            for order in orders:
                status_emoji = "‚úÖ" if order.status == "completed" else "üîÑ"
                order_date = order.created_at.strftime("%d.%m.%Y")

                message_text += (
                    f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                    f"üóì {order_date} | üßä {order.bottles_count} —à—Ç.\n"
                    f"üíµ {order.total_cost:,} —Å—É–º\n"
                    f"üìç {order.location[:30]}...\n\n"
                    if language == "ru" else
                    f"{status_emoji} <b>Order #{order.id}</b>\n"
                    f"üóì {order_date} | üßä {order.bottles_count} pcs\n"
                    f"üíµ {order.total_cost:,} UZS\n"
                    f"üìç {order.location[:30]}...\n\n"
                )

            await message.answer(
                message_text,
                parse_mode="HTML",
                reply_markup=wasabi_keyboard(language)
            )

    except Exception as e:
        logger.error(f"Error in order_history: {e}")
        error_msg = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤."
            if language == "ru" else
            "‚ö†Ô∏è Error loading order history."
        )
        await message.answer(error_msg)